import tensorflow as tfimport numpy as npimport osimport cv2from keras import backend as kimport win32apiimport win32conmodel = tf.keras.models.load_model('gesture_final_model.model')Categories = ['5', '4', '1', '3', '2', '0']x, y, w, h = 0, 100, 200, 200def get_img_contour_thresh(img):    x, y, w, h = 0, 100, 200, 200    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    blur = cv2.GaussianBlur(gray, (5, 5), 0)    ret, thresh1 = cv2.threshold(blur, 175, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)    thresh1 = thresh1[y:y + h, x:x + w]    contours, hierarchy = cv2.findContours(thresh1, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)[-2:]    return img, contours, thresh1def click(x, y):    win32api.SetCursorPos((x, y))    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, x, y, 0, 0)    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, x, y, 0, 0)def hold(x, y):    win32api.SetCursorPos((x, y))    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, x, y, 0, 0)def video_capture():    i = 0    movable = False    captured = cv2.VideoCapture(0)    while True:        _, img = captured.read()        # Flipping Image        # img = cv2.flip(img, 0) # Vertical        img = cv2.flip(img, 1)  # Horizontal        # Or you can make both        # img = cv2.flip(img, -1)        _, contours, thresh = get_img_contour_thresh(img)        # thresh = 255 - thresh        re_thresh = cv2.resize(thresh, (28, 28))        event_reading = cv2.waitKey(5) & 0XFF        new_image = np.array(re_thresh)        new_image = new_image.astype('float32')        new_image /= 255        if k.image_data_format() == 'channels_first':            new_image = new_image.reshape(1, 28, 28)        else:            new_image = new_image.reshape(28, 28)        new_image = np.expand_dims(new_image, axis=0)        ans = model.predict(new_image).argmax()        result = str(Categories[ans])        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 3)        cv2.putText(img, "Deger : " + result, (0, 25),                    cv2.FONT_HERSHEY_COMPLEX, 0.8, (0, 0, 255), 2)        cv2.imshow("Thresh", thresh)        cv2.imshow("Image Panel", img)        if event_reading == ord('q'):            break    captured.release()    cv2.destroyAllWindows()def main():    video_capture()if __name__ == '__main__':    main()